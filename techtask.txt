**Техническое задание на клиентскую часть «Рулетки» (Display‑Site)**

---

### 1. Цель и общая архитектура  
- Отображение состояния одного игрового стола в режиме реального времени.  
- Вход на экран выбора стола, затем — собственно «экран стола».  
- Коммуникация с бэкендом: передача команд из админ‑панели и приём текущих данных по WebSocket или коротким polling‑запросам.

---

### 2. Показатели нагрузки  
- Одновременных столов: до 30.  
- Одновременных зрителей (клиентов) на один стол: 30, но суммарная нагрузка небольшая.  
- Обновление интерфейса: 2–3 сек интервал или пуш‑уведомления от сервера.

---

### 3. Ориентация экрана  
- **Вертикальный режим**, разрешение целевое — 1080 × 1920 px.

---

### 4. Общий макет (Flex‑контейнер с двумя колонками)  
- **Левая колонка (30% ширины)** — «История последних 15 выпадений».  
- **Вертикальный разделитель** между ними (декоративный неоновый штрих).  
- **Правая колонка (70% ширины)** — «Статистика и служебная информация».

---

### 5. Левая колонка: История выпадений  
1. **Список из 15 кружков** (последние 15 результатов), располагается вертикально сверху вниз.  
2. **Визуальная иерархия**:  
   - Самый последний номер — увеличенный, расположен в центре верхней части.  
   - Остальные — чуть меньшие;  
   - Цвет кружка соответствует цвету «рулеточного» номера (чёрный/красный/зелёный), текст — белый.  
3. **Выравнивание**:  
   - Чёрные кружки — прижаты к левому краю;  
   - Красные — к правому;  
   - Зелёные (0) — по центру.  
4. **Анимация при добавлении нового номера**:  
   - Плавный сдвиг всей ленты вниз;  
   - Fade‑in или лёгкое увеличение вновь появившегося кружка.

---

### 6. Правая колонка: Статистика и служебные блоки  

#### 6.1. Логотип  
- Верхний центр: логотип «22 Hub» с неоновым свечением.  

#### 6.2. Лимиты ставок  
- Две строки:  
  1. **MIN** (пример: «MIN   100  = 1 $»)  
  2. **MAX** (пример: «MAX   10000  = 100 $»)  
- Шрифт крупный, данные легко заменяемы.

#### 6.3. Бар‑диаграммы процентов  
- **LOW / ZERO / HIGH**  
  - Горизонтальный прогресс‑бар на 100 %.  
  - «LOW» (1 – 18) слева, «ZERO» (0) в центре, «HIGH» (19 – 36) справа.  
  - Каждый сегмент занимает ровно ту долю ширины, которая соответствует его проценту появления.  
- **ODD / ZERO / EVEN**  
  - Аналогичный трёхсекционный бар: «ODD» слева, «ZERO» в центре, «EVEN» справа.  
- **BLACK / GREEN / RED**  
  - Тот же принцип, три сектора.  
- **ODD / GREEN / EVEN**  
  - Финальный бар, аналогично предыдущим.

> Для каждого бара должно быть анимированное вырастание сегментов при первичной загрузке и плавное изменение при обновлении данных.

#### 6.4. Самые «горячие» и «холодные» цифры  
- **Hot‑блок**: 4 числа, которые выпадали чаще всего после последней очистки, и рядом их частота.  
- **Ice‑блок**: 4 числа с минимальным количеством выпадений и их частоты.  
- Расположены в одну строку (по четыре элемента в каждом блоке).

---

### 7. Поведение при обновлении данных  
- При появлении новой записи в админ‑панели данные для соответствующего стола обновляются на клиенте:  
  - История смещается и дополняется;  
  - Все бары и блоки горячих/холодных чисел пересчитываются и плавно анимируются.  
- Обновление может быть организовано:  
  1. **Polling** — короткий GET-запрос каждые 2–3 сек;  
  2. **WebSocket** — сервер пушит изменения (рекомендуется для минимизации задержек).  
- Важно: надёжное переподключение при потере связи.
- при получении новых данных должны начаться следующие анимации:
  - 14 цифр двигаются вниз, и наверху появлятся увеличением новая последняя цифра (предыдущая становится на свое место, возможно айди или классом задать что красные слева черные справа, но тут сам еще реши)
  - бары плавно меняются, в горячих и холодных цифрах можно просто обновить данные без анимации) 

---

### 8. Требования к стилизации  
- Все визуальные элементы (кружки, бары, логотип, разделитель) должны быть легко «скинабельны»:  
  - Цвета, шрифты, отступы, размеры задаются через переменные темизации.  
  - Возможность применения любого внешнего дизайна (CSS‑framework или собственный скин).

---

### 9. Админ‑панель (коротко)  
- **Аутентификация**: единый пароль для доступа ко всем столам, выбор стола по его номеру.  
- **Основной интерфейс**: сетка из 37 кнопок (цифры 0–36), цвет каждой кнопки соответствует цвету числа.  
- **Попап‑подтверждение** при нажатии на кнопку-число.  Кнопка подтверждения должна быть большой.
- **Кнопка «Сброс»**, обнуляющая все накопленные данные по столу, а именно делает их равными 0. undefined данных по статистике быть не должно.

---

### 10. Бэкенд и СУБД (технически)  
- **Язык**: TypeScript (Node.js).  
- **СУБД**: лёгкая и быстрая (например, SQLite или mongodb) 
- **Хранимые данные на стол**:  
  - Массив из последних 500 выпавших чисел (для расчётов).  
  - Счётчики выпадений для всех 37 чисел (0–36).(массив на 37 индексов)  
- **Контейнеризация**: Docker‑образ с автопересборкой при изменении исходников (для dev‑режима).  
- **Метрики** рассчитываются на сервере и отдаются клиенту в готовом виде.
- **Эндпоинты** должен быть rpc или get на получение стола, rpc или post для пуша новых данных на стол, WebSocket для клиент фронтенда стола(дополнительно к гет)

---

вот примерный json стола который будет приходить на фронтенд с бэкенда
{
  "tableId": "1",
  "lastNumbers": [
    { "value": 17, "color": "black" },
    { "value": 32, "color": "red" },
    { "value": 0, "color": "green" },
    { "value": 8, "color": "black" },
    { "value": 19, "color": "red" },
    { "value": 14, "color": "red" },
    { "value": 25, "color": "red" },
    { "value": 22, "color": "black" },
    { "value": 2, "color": "black" },
    { "value": 4, "color": "black" },
    { "value": 36, "color": "red" },
    { "value": 11, "color": "black" },
    { "value": 7, "color": "red" },
    { "value": 1, "color": "red" },
    { "value": 20, "color": "black" }
  ],
  "minBet": 100,
  "maxBet": 10000,
  "statistics": {
    "lowMidHigh": {
      "low": 38,
      "zero": 8,
      "high": 54
    },
    "evenOddZero": {
      "even": 44,
      "zero": 8,
      "odd": 48
    },
    "colorDistribution": {
      "black": 42,
      "green": 8,
      "red": 50
    },
    "hotNumbers": [
      { "value": 14, "count": 27 },
      { "value": 32, "count": 24 },
      { "value": 19, "count": 23 },
      { "value": 7, "count": 21 }
    ],
    "coldNumbers": [
      { "value": 5, "count": 2 },
      { "value": 33, "count": 3 },
      { "value": 12, "count": 4 },
      { "value": 1, "count": 5 }
    ]
  }
}
